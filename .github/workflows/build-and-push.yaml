name: Build and Deploy
on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
    paths-ignore:
      - "README.md"
      - ".vscode/**"
      - "assets/**"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  set-env:
    name: Set Environment Variables
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.main.outputs.version }}
      created: ${{ steps.main.outputs.created }}
      repository: ${{ steps.main.outputs.repository }}

    steps:
      - id: main
        run: |
          echo ::set-output name=version::$(echo ${GITHUB_SHA} | cut -c1-7)
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=repository::$GITHUB_REPOSITORY

  package-services:
    runs-on: ubuntu-latest
    needs: set-env
    permissions:
      contents: read
      packages: write

    outputs:
      api-image: ${{ steps.image-tag.outputs.image-album-api }}
      ui-image: ${{ steps.image-tag.outputs.image-album-viewer }}

    strategy:
      matrix:
        services:
          [
            { "appName": "album-api", "directory": "./album-api" },
            { "appName": "album-viewer", "directory": "./album-viewer" },
          ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ needs.set-env.outputs.repository }}/${{ matrix.services.appName }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.services.directory }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Output image tag
        id: image-tag
        run: |
          echo ::set-output name=image-${{ matrix.services.appName }}::${{ env.REGISTRY }}/$GITHUB_REPOSITORY/${{ matrix.services.appName }}:sha-${{ needs.set-env.outputs.version }} | tr '[:upper:]' '[:lower:]'

  deploy:
    if: github.repository != 'Azure-samples/containerapps-dapralbums'
    runs-on: ubuntu-latest
    needs: [package-services]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy bicep
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create -g ${{ secrets.RESOURCE_GROUP }} -l eastus
            az deployment group create -g ${{ secrets.RESOURCE_GROUP }} -f ./deploy/bicep-MI/main.bicep --parameters \
            apiImage='${{ needs.package-services.outputs.api-image }}' \
            viewerImage='${{ needs.package-services.outputs.ui-image }}' \
            registryName=${{ env.REGISTRY }} \
            registryUsername=${{ github.actor }} \
            registryPassword=${{ secrets.GH_PAT }} \
            clientId=${{ secrets.CLIENT_ID }} \
            objectId=${{ secrets.SP_OBJ_ID }} \
            clientSecret=${{ secrets.CLIENT_SECRET }}
